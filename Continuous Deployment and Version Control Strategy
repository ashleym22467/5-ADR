# ADR N: Continuous Deployment and Version Control Strategy

## Forces Influencing the Decision:
Technological: Automation efficiency, rollback capabilities, integration with testing workflows.
Cost-related: Maintenance costs, infrastructure dependencies.
Project Local: Alignment with Git-based development workflows, deployment frequency.

## Decision 
We will implement GitHub Actions as the CI/CD pipeline to automate deployments and testing while maintaining version control.

## Rationale 
GitHub Actions enables streamlined code integration, automated testing, and efficient deployment rollbacks. Jenkins and GitLab CI were considered but rejected due to repository hosting constraints and integration challenges. Alternative CI/CD solutions were rejected:

Jenkins was discarded due to excessive setup and maintenance overhead.
GitLab CI was discarded due to repository hosting limitations.

## Status
Proposed 

## Consequences
Positive: Faster development cycles, reduced manual intervention, improved collaboration.
Negative: Learning curve for workflow customization, dependency on GitHub infrastructure.

Alignment with AWS Well-Architected Pillars: Operational Excellence: Automated testing ensures reliable deployments. Reliability: Streamlined rollback mechanisms reduce downtime risks. Cost Optimization: Eliminates redundant manual deployment processes. Sustainability: Reduces waste from inefficient development cycles.
